(** * DSL benchmark: Hydra-S1 ZKPS *)

Require Import Coq.Lists.List.
Require Import Coq.micromega.Lia.
Require Import Coq.Init.Peano.
Require Import Coq.Arith.PeanoNat.
Require Import Coq.Arith.Compare_dec.
Require Import Coq.PArith.BinPosDef.
Require Import Coq.ZArith.BinInt Coq.ZArith.ZArith Coq.ZArith.Zdiv Coq.ZArith.Znumtheory Coq.NArith.NArith. (* import Zdiv before Znumtheory *)
Require Import Coq.NArith.Nnat.

Require Import Crypto.Spec.ModularArithmetic.
Require Import Crypto.Arithmetic.PrimeFieldTheorems Crypto.Algebra.Field.
Require Import Crypto.Util.Decidable. (* Crypto.Util.Notations. *)
Require Import Coq.setoid_ring.Ring_theory Coq.setoid_ring.Field_theory Coq.setoid_ring.Field_tac.

From Circom Require Import Circom Util Default Tuple ListUtil LibTactics Simplify Repr Coda.

Local Coercion N.of_nat : nat >-> N.
Local Coercion Z.of_nat : nat >-> Z.

Local Open Scope list_scope.
Local Open Scope F_scope.
Local Open Scope Z_scope.
Local Open Scope circom_scope.
Local Open Scope tuple_scope.

Definition Poseidon (nInputs : nat) (inputs : list F) : F := 0.

#[global]Hint Extern 10 (Forall _ (firstn _ _)) => apply Forall_firstn: core.
#[global]Hint Extern 10  => match goal with
   | [ |- context[List_nth_Default _ _] ] => unfold_default end: core.
   #[global]Hint Extern 10  => match goal with
   | [ |- context[List.nth  _ _ _] ] => apply Forall_nth end: core.
#[global]Hint Extern 10 => match goal with
  [ |- context[length _] ] => rewrite_length end: core.
#[global]Hint Extern 10 (Forall _ (skipn _ _)) => apply Forall_skipn: core.

#[global]Hint Extern 10 (Forall _ (_ :: _)) => constructor: core.
#[global]Hint Extern 10 (Z.of_N (N.of_nat _)) => rewrite nat_N_Z: core.
#[global]Hint Extern 10  => repeat match goal with
  [ H: context[Z.of_N (N.of_nat _)] |- _] => rewrite nat_N_Z in H end: core.

#[global]Hint Extern 10 (_ < _) => lia: core.
#[global]Hint Extern 10 (_ < _)%nat => lia: core.
#[global]Hint Extern 10 (_ <= _) => lia: core.
#[global]Hint Extern 10 (_ <= _)%nat => lia: core.
#[global]Hint Extern 10 (_ > _) => lia: core.
#[global]Hint Extern 10 (_ > _)%nat => lia: core.
#[global]Hint Extern 10 (_ >= _) => lia: core.
#[global]Hint Extern 10 (_ >= _)%nat => lia: core.
#[global]Hint Extern 10 (S _ = S _) => f_equal: core.

(** ** PositionSwitcher *)

Lemma PositionSwitcher_obligation0_trivial: forall (_in : (list F)) (s : F) (v : F), Forall (fun x0 => True) _in -> ((length _in) = 2%nat) -> True -> True -> ((v = s) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation1_trivial: forall (_in : (list F)) (s : F) (v : F), Forall (fun x1 => True) _in -> ((length _in) = 2%nat) -> True -> True -> ((v = 1%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation2_trivial: forall (_in : (list F)) (s : F) (v : F), Forall (fun x2 => True) _in -> ((length _in) = 2%nat) -> True -> True -> ((v = s) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation3_trivial: forall (_in : (list F)) (s : F) (v : F), Forall (fun x3 => True) _in -> ((length _in) = 2%nat) -> True -> True -> ((v = (1%F - s)%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation4_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x4 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (_in!1%nat)) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation5_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x5 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (_in!0%nat)) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation6_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x6 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = ((_in!1%nat) - (_in!0%nat))%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation7_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x7 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = s) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation8_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x8 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (((_in!1%nat) - (_in!0%nat))%F * s)%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation9_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x9 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (_in!0%nat)) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation10_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x10 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = ((((_in!1%nat) - (_in!0%nat))%F * s)%F + (_in!0%nat))%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation11_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x11 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (_in!0%nat)) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation12_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x12 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (_in!1%nat)) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation13_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x13 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = ((_in!0%nat) - (_in!1%nat))%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation14_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x14 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = s) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation15_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x15 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (((_in!0%nat) - (_in!1%nat))%F * s)%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation16_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x16 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (_in!1%nat)) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation17_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x17 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = ((((_in!0%nat) - (_in!1%nat))%F * s)%F + (_in!1%nat))%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation18_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : (list F)), Forall (fun x18 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> Forall (fun x19 => True) v -> True -> ((v = nil) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation19_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x20 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> (True -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation20_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : (list F)), Forall (fun x21 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> Forall (fun x22 => True) v -> True -> ((v = (((((_in!0%nat) - (_in!1%nat))%F * s)%F + (_in!1%nat))%F :: nil)) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation21_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x23 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> (True -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation22: forall (_in : (list F)) (s : F) (_ : unit) (v : (list F)), Forall (fun x24 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> Forall (fun x25 => True) v -> True -> ((v = (((((_in!1%nat) - (_in!0%nat))%F * s)%F + (_in!0%nat))%F :: (((((_in!0%nat) - (_in!1%nat))%F * s)%F + (_in!1%nat))%F :: nil))) -> ((((s = 0%F) \/ (s = 1%F)) -> (((s = 0%F) \/ (s = 1%F)) /\ (((s = 1%F) -> (((2%nat <= (length _in)) /\ (2%nat <= (length v))) /\ (((v!0%nat) = (_in!1%nat)) /\ ((v!1%nat) = (_in!0%nat))))) /\ ((s = 0%F) -> (((2%nat <= (length _in)) /\ (2%nat <= (length v))) /\ (((v!0%nat) = (_in!0%nat)) /\ ((v!1%nat) = (_in!1%nat)))))))) /\ ((length v) = 2%nat))).
Proof.
  unwrap_C; intuit; subst; simpl in *;
    try lia; try fqsatz; destruct _in;
    simpl; try reflexivity; simpl_default;
    try (simpl in *; lia); try fqsatz.
Qed.

Lemma PositionSwitcher_obligation23_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x26 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> (True -> True).
Proof. hammer. Qed.

(** ** VerifyMerklePath *)

(* TODO *)

(** ** VerifyHydraCommitment *)

Lemma VerifyHydraCommitment_obligation0: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (v : Z), True -> True -> Forall (fun x0 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x1 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> True -> ((v = 1%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation1: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (v : (list F)), True -> True -> Forall (fun x2 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x3 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> Forall (fun x4 => True) v -> True -> (((True /\ ((v!0%nat) = secret)) /\ ((length v) = 1%nat)) -> ((length v) = 1%nat)).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation2: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (v : Z), True -> True -> Forall (fun x5 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x6 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> True -> ((v = 2%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation3: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (v : (list F)), True -> True -> Forall (fun x7 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x8 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> Forall (fun x9 => True) v -> True -> ((((True /\ ((v!0%nat) = address)) /\ ((v!1%nat) = commitment)) /\ ((length v) = 2%nat)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation4_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : F), True -> True -> Forall (fun x10 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x11 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> ((v = 1%F) -> True).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation5_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : F), True -> True -> Forall (fun x12 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x13 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> (((v = (commitmentMapperPubKey!0%nat)) /\ (v = k0)) -> True).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation6_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : F), True -> True -> Forall (fun x14 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x15 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> (((v = (commitmentMapperPubKey!1%nat)) /\ (v = k1)) -> True).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation7_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : F), True -> True -> Forall (fun x16 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x17 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> (((v = (commitmentReceipt!2%nat)) /\ (v = r2)) -> True).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation8_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : F), True -> True -> Forall (fun x18 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x19 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> (((v = (commitmentReceipt!0%nat)) /\ (v = r0)) -> True).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation9_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : F), True -> True -> Forall (fun x20 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x21 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> (((v = (commitmentReceipt!1%nat)) /\ (v = r1)) -> True).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation10_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : F), True -> True -> Forall (fun x22 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x23 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> (((v = (Poseidon 2%nat (address :: (commitment :: nil)))) /\ (v = message)) -> True).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation11_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : unit), True -> True -> Forall (fun x24 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x25 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> (True -> True).
Proof. hammer. Qed.

(** ** hydraS1 *)

Lemma hydraS1_obligation0_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x0 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x1 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x2 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x3 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x4 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x5 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x6 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> ((v = sourceIdentifier) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation1_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x7 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x8 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x9 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x10 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x11 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x12 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x13 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> ((v = sourceSecret) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation2: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x14 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x15 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x16 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x17 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x18 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x19 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x20 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x21 => True) v -> True -> ((((length v) = 2%nat) /\ (v = commitmentMapperPubKey)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation3: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x22 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x23 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x24 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x25 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x26 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x27 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x28 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x29 => True) v -> True -> ((((length v) = 3%nat) /\ (v = sourceCommitmentReceipt)) -> ((length v) = 3%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation4_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x30 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x31 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x32 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x33 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x34 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x35 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x36 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> ((v = destinationIdentifier) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation5_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x37 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x38 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x39 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x40 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x41 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x42 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x43 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> ((v = destinationSecret) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation6: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x44 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x45 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x46 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x47 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x48 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x49 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x50 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> Forall (fun x51 => True) v -> True -> ((((length v) = 2%nat) /\ (v = commitmentMapperPubKey)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation7: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x52 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x53 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x54 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x55 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x56 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x57 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x58 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> Forall (fun x59 => True) v -> True -> ((((length v) = 3%nat) /\ (v = destinationCommitmentReceipt)) -> ((length v) = 3%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation8: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x60 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x61 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x62 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x63 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x64 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x65 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x66 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> True -> ((v = 2%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation9: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x67 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x68 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x69 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x70 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x71 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x72 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x73 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> Forall (fun x74 => True) v -> True -> ((((True /\ ((v!0%nat) = sourceIdentifier)) /\ ((v!1%nat) = sourceValue)) /\ ((length v) = 2%nat)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation10: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x75 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x76 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x77 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x78 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x79 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x80 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x81 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> ((((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < v)) /\ (v = accountsTreeHeight)) -> (0%nat < v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation11_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x82 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x83 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x84 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x85 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x86 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x87 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x88 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (((v = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) /\ (v = accountLeafConstructor)) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation12_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x89 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x90 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x91 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x92 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x93 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x94 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x95 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> ((v = accountsTreeRoot) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation13: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x96 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x97 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x98 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x99 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x100 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x101 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x102 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> Forall (fun x103 => True) v -> True -> (((Z.of_nat (length v) = accountsTreeHeight) /\ (v = accountMerklePathElements)) -> (Z.of_nat (length v) = accountsTreeHeight)).
Proof. hammer. Qed.

Lemma hydraS1_obligation14: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x104 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x105 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x106 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x107 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x108 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x109 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x110 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> Forall (fun x111 => True) v -> True -> (((Z.of_nat (length v) = accountsTreeHeight) /\ (v = accountMerklePathIndices)) -> (Z.of_nat (length v) = accountsTreeHeight)).
Proof. hammer. Qed.

Lemma hydraS1_obligation15: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x112 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x113 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x114 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x115 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x116 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x117 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x118 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> True -> ((v = 2%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation16: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x119 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x120 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x121 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x122 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x123 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x124 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x125 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> Forall (fun x126 => True) v -> True -> ((((True /\ ((v!0%nat) = accountsTreeRoot)) /\ ((v!1%nat) = accountsTreeValue)) /\ ((length v) = 2%nat)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation17: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x127 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x128 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x129 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x130 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x131 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x132 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x133 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> ((((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < v)) /\ (v = registryTreeHeight)) -> (0%nat < v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation18_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x134 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x135 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x136 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x137 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x138 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x139 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x140 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> (((v = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) /\ (v = registryLeafConstructor)) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation19_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x141 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x142 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x143 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x144 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x145 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x146 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x147 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> ((v = registryTreeRoot) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation20: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x148 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x149 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x150 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x151 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x152 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x153 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x154 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> Forall (fun x155 => True) v -> True -> (((Z.of_nat (length v) = registryTreeHeight) /\ (v = registryMerklePathElements)) -> (Z.of_nat (length v) = registryTreeHeight)).
Proof. hammer. Qed.

Lemma hydraS1_obligation21: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x156 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x157 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x158 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x159 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x160 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x161 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x162 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> Forall (fun x163 => True) v -> True -> (((Z.of_nat (length v) = registryTreeHeight) /\ (v = registryMerklePathIndices)) -> (Z.of_nat (length v) = registryTreeHeight)).
Proof. hammer. Qed.

Lemma hydraS1_obligation22: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x164 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x165 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x166 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x167 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x168 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x169 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x170 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> True -> ((v = 252%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation23_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x171 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x172 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x173 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x174 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x175 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x176 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x177 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> True -> (((((^ v) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) /\ (v = sourceValue)) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation24: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x178 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x179 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x180 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x181 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x182 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x183 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x184 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x185 => ((x185 = 0%F) \/ (x185 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> True -> ((v = 252%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation25_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x186 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x187 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x188 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x189 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x190 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x191 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x192 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x193 => ((x193 = 0%F) \/ (x193 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> True -> ((((^ v) < (2%nat ^ 252%nat)%Z) /\ (v = claimedValue)) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation26: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x194 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x195 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x196 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x197 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x198 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x199 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x200 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x201 => ((x201 = 0%F) \/ (x201 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x202 => ((x202 = 0%F) \/ (x202 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> True -> ((v = 252%nat) -> ((0%nat <= v) /\ (v <= (C.k - 1%nat)%Z))).
Proof. hammer. Qed.

Lemma hydraS1_obligation27: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x203 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x204 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x205 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x206 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x207 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x208 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x209 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x210 => ((x210 = 0%F) \/ (x210 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x211 => ((x211 = 0%F) \/ (x211 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> True -> ((((^ v) < (2%nat ^ 252%nat)%Z) /\ (v = claimedValue)) -> ((^ v) <= ((2%nat ^ 252%nat)%Z - 1%nat)%Z)).
Proof. hammer. Qed.

Lemma hydraS1_obligation28: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x212 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x213 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x214 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x215 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x216 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x217 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x218 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x219 => ((x219 = 0%F) \/ (x219 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x220 => ((x220 = 0%F) \/ (x220 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> True -> (((((^ v) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) /\ (v = sourceValue)) -> (((^ v) + 1%nat)%Z < (2%nat ^ 252%nat)%Z)).
Proof. hammer. Qed.

Lemma hydraS1_obligation29_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x221 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x222 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x223 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x224 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x225 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x226 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x227 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x228 => ((x228 = 0%F) \/ (x228 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x229 => ((x229 = 0%F) \/ (x229 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> True -> ((v = isStrict) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation30_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x230 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x231 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x232 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x233 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x234 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x235 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x236 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x237 => ((x237 = 0%F) \/ (x237 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x238 => ((x238 = 0%F) \/ (x238 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> True -> ((v = 1%F) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation31_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x239 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x240 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x241 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x242 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x243 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x244 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x245 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x246 => ((x246 = 0%F) \/ (x246 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x247 => ((x247 = 0%F) \/ (x247 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> True -> ((v = (isStrict - 1%F)%F) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation32_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x248 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x249 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x250 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x251 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x252 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x253 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x254 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x255 => ((x255 = 0%F) \/ (x255 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x256 => ((x256 = 0%F) \/ (x256 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> True -> ((v = isStrict) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation33_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x257 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x258 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x259 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x260 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x261 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x262 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x263 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x264 => ((x264 = 0%F) \/ (x264 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x265 => ((x265 = 0%F) \/ (x265 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> True -> (((((^ v) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) /\ (v = sourceValue)) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation34_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x266 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x267 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x268 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x269 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x270 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x271 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x272 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x273 => ((x273 = 0%F) \/ (x273 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x274 => ((x274 = 0%F) \/ (x274 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> True -> ((((^ v) < (2%nat ^ 252%nat)%Z) /\ (v = claimedValue)) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation35_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x275 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x276 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x277 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x278 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x279 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x280 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x281 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x282 => ((x282 = 0%F) \/ (x282 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x283 => ((x283 = 0%F) \/ (x283 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> True -> (((((^ v) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) /\ (v = sourceValue)) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation36_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x284 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x285 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x286 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x287 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x288 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x289 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x290 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x291 => ((x291 = 0%F) \/ (x291 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x292 => ((x292 = 0%F) \/ (x292 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> True -> ((v = (claimedValue - sourceValue)%F) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation37_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x293 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x294 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x295 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x296 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x297 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x298 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x299 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x300 => ((x300 = 0%F) \/ (x300 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x301 => ((x301 = 0%F) \/ (x301 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> True -> ((v = isStrict) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation38_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x302 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x303 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x304 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x305 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x306 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x307 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x308 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x309 => ((x309 = 0%F) \/ (x309 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x310 => ((x310 = 0%F) \/ (x310 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> True -> ((v = ((claimedValue - sourceValue)%F * isStrict)%F) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation39: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (u6 : unit) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x311 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x312 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x313 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x314 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x315 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x316 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x317 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x318 => ((x318 = 0%F) \/ (x318 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x319 => ((x319 = 0%F) \/ (x319 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> (sourceValue = (sourceValue + ((claimedValue - sourceValue)%F * isStrict)%F)%F) -> True -> ((v = 2%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation40: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (u6 : unit) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x320 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x321 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x322 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x323 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x324 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x325 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x326 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x327 => ((x327 = 0%F) \/ (x327 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x328 => ((x328 = 0%F) \/ (x328 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> (sourceValue = (sourceValue + ((claimedValue - sourceValue)%F * isStrict)%F)%F) -> Forall (fun x329 => True) v -> True -> ((((True /\ ((v!0%nat) = sourceSecret)) /\ ((v!1%nat) = 1%F)) /\ ((length v) = 2%nat)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation41: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (u6 : unit) (sourceSecretHash : F) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x330 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x331 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x332 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x333 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x334 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x335 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x336 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x337 => ((x337 = 0%F) \/ (x337 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x338 => ((x338 = 0%F) \/ (x338 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> (sourceValue = (sourceValue + ((claimedValue - sourceValue)%F * isStrict)%F)%F) -> (sourceSecretHash = (Poseidon 2%nat (sourceSecret :: (1%F :: nil)))) -> True -> ((v = 2%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation42: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (u6 : unit) (sourceSecretHash : F) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x339 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x340 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x341 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x342 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x343 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x344 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x345 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x346 => ((x346 = 0%F) \/ (x346 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x347 => ((x347 = 0%F) \/ (x347 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> (sourceValue = (sourceValue + ((claimedValue - sourceValue)%F * isStrict)%F)%F) -> (sourceSecretHash = (Poseidon 2%nat (sourceSecret :: (1%F :: nil)))) -> Forall (fun x348 => True) v -> True -> ((((True /\ ((v!0%nat) = sourceSecretHash)) /\ ((v!1%nat) = externalNullifier)) /\ ((length v) = 2%nat)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation43_trivial: forall (registryTreeHeight : Z) (accountsTreeHeight : Z) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (u6 : unit) (sourceSecretHash : F) (c : F) (u7 : unit), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x349 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x350 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x351 => True) accountMerklePathElements -> (Z.of_nat (length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x352 => True) accountMerklePathIndices -> (Z.of_nat (length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x353 => True) registryMerklePathElements -> (Z.of_nat (length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x354 => True) registryMerklePathIndices -> (Z.of_nat (length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x355 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> True -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> Forall (fun x356 => ((x356 = 0%F) \/ (x356 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x357 => ((x357 = 0%F) \/ (x357 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> (sourceValue = (sourceValue + ((claimedValue - sourceValue)%F * isStrict)%F)%F) -> (sourceSecretHash = (Poseidon 2%nat (sourceSecret :: (1%F :: nil)))) -> (c = (Poseidon 2%nat (sourceSecretHash :: (externalNullifier :: nil)))) -> (c = nullifier) -> (True -> True).
Proof. hammer. Qed.
