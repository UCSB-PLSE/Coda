(** * DSL benchmark: Hydra-S1 ZKPS *)

Require Import Coq.Lists.List.
Require Import Coq.micromega.Lia.
Require Import Coq.Init.Peano.
Require Import Coq.Arith.PeanoNat.
Require Import Coq.Arith.Compare_dec.
Require Import Coq.PArith.BinPosDef.
Require Import Coq.ZArith.BinInt Coq.ZArith.ZArith Coq.ZArith.Zdiv Coq.ZArith.Znumtheory Coq.NArith.NArith. (* import Zdiv before Znumtheory *)
Require Import Coq.NArith.Nnat.

Require Import Crypto.Spec.ModularArithmetic.
Require Import Crypto.Arithmetic.PrimeFieldTheorems Crypto.Algebra.Field.
Require Import Crypto.Util.Decidable. (* Crypto.Util.Notations. *)
Require Import Coq.setoid_ring.Ring_theory Coq.setoid_ring.Field_theory Coq.setoid_ring.Field_tac.

From Circom Require Import Circom Util Default Tuple ListUtil LibTactics Simplify Repr Coda.

Local Coercion N.of_nat : nat >-> N.
Local Coercion Z.of_nat : nat >-> Z.

Local Open Scope list_scope.
Local Open Scope F_scope.
Local Open Scope Z_scope.
Local Open Scope circom_scope.
Local Open Scope tuple_scope.

Definition Poseidon (nInputs : nat) (inputs : list F) : F. Admitted.

Axiom Poseidon_2 : forall inputs : list F,
  length inputs = 2%nat ->
  Poseidon 2%nat inputs = Poseidon 2%nat ((inputs!0%nat)::(inputs!1%nat)::nil).

Definition EdDSAPoseidonVerifier (ax ay s r8x r8y message: F) : Prop. Admitted.

Definition VerifyHydraCommitment address secret commitmentMapperPubKey commitmentReceipt : Prop :=
  let message := Poseidon 2%nat (address :: (Poseidon 1%nat (secret::nil)) :: nil) in
  EdDSAPoseidonVerifier (commitmentMapperPubKey!0) (commitmentMapperPubKey!1) (commitmentReceipt!2) (commitmentReceipt!0) (commitmentReceipt!1) message.

#[global]Hint Extern 10 (Forall _ (firstn _ _)) => apply Forall_firstn: core.
#[global]Hint Extern 10  => match goal with
   | [ |- context[List_nth_Default _ _] ] => unfold_default end: core.
   #[global]Hint Extern 10  => match goal with
   | [ |- context[List.nth  _ _ _] ] => apply Forall_nth end: core.
#[global]Hint Extern 10 => match goal with
  [ |- context[length _] ] => rewrite_length end: core.
#[global]Hint Extern 10 (Forall _ (skipn _ _)) => apply Forall_skipn: core.

#[global]Hint Extern 10 (Forall _ (_ :: _)) => constructor: core.
#[global]Hint Extern 10 (Z.of_N (N.of_nat _)) => rewrite nat_N_Z: core.
#[global]Hint Extern 10  => repeat match goal with
  [ H: context[Z.of_N (N.of_nat _)] |- _] => rewrite nat_N_Z in H end: core.

#[global]Hint Extern 10 (_ < _) => lia: core.
#[global]Hint Extern 10 (_ < _)%nat => lia: core.
#[global]Hint Extern 10 (_ <= _) => lia: core.
#[global]Hint Extern 10 (_ <= _)%nat => lia: core.
#[global]Hint Extern 10 (_ > _) => lia: core.
#[global]Hint Extern 10 (_ > _)%nat => lia: core.
#[global]Hint Extern 10 (_ >= _) => lia: core.
#[global]Hint Extern 10 (_ >= _)%nat => lia: core.
#[global]Hint Extern 10 (S _ = S _) => f_equal: core.

(** ** PositionSwitcher *)

Lemma PositionSwitcher_obligation0_trivial: forall (_in : (list F)) (s : F) (v : F), Forall (fun x0 => True) _in -> ((length _in) = 2%nat) -> True -> True -> ((v = s) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation1_trivial: forall (_in : (list F)) (s : F) (v : F), Forall (fun x1 => True) _in -> ((length _in) = 2%nat) -> True -> True -> ((v = 1%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation2_trivial: forall (_in : (list F)) (s : F) (v : F), Forall (fun x2 => True) _in -> ((length _in) = 2%nat) -> True -> True -> ((v = s) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation3_trivial: forall (_in : (list F)) (s : F) (v : F), Forall (fun x3 => True) _in -> ((length _in) = 2%nat) -> True -> True -> ((v = (1%F - s)%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation4_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x4 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (_in!1%nat)) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation5_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x5 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (_in!0%nat)) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation6_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x6 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = ((_in!1%nat) - (_in!0%nat))%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation7_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x7 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = s) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation8_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x8 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (((_in!1%nat) - (_in!0%nat))%F * s)%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation9_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x9 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (_in!0%nat)) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation10_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x10 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = ((((_in!1%nat) - (_in!0%nat))%F * s)%F + (_in!0%nat))%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation11_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x11 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (_in!0%nat)) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation12_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x12 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (_in!1%nat)) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation13_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x13 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = ((_in!0%nat) - (_in!1%nat))%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation14_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x14 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = s) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation15_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x15 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (((_in!0%nat) - (_in!1%nat))%F * s)%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation16_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x16 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = (_in!1%nat)) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation17_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x17 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> ((v = ((((_in!0%nat) - (_in!1%nat))%F * s)%F + (_in!1%nat))%F) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation18_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : (list F)), Forall (fun x18 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> Forall (fun x19 => True) v -> True -> ((v = nil) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation19_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x20 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> (True -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation20_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : (list F)), Forall (fun x21 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> Forall (fun x22 => True) v -> True -> ((v = (((((_in!0%nat) - (_in!1%nat))%F * s)%F + (_in!1%nat))%F :: nil)) -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation21_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x23 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> (True -> True).
Proof. hammer. Qed.

Lemma PositionSwitcher_obligation22: forall (_in : (list F)) (s : F) (_ : unit) (v : (list F)), Forall (fun x24 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> Forall (fun x25 => True) v -> True -> ((v = (((((_in!1%nat) - (_in!0%nat))%F * s)%F + (_in!0%nat))%F :: (((((_in!0%nat) - (_in!1%nat))%F * s)%F + (_in!1%nat))%F :: nil))) -> ((((s = 0%F) \/ (s = 1%F)) /\ (((s = 0%F) \/ (s = 1%F)) /\ (((s = 1%F) -> (((2%nat <= (length _in)) /\ (2%nat <= (length v))) /\ (((v!0%nat) = (_in!1%nat)) /\ ((v!1%nat) = (_in!0%nat))))) /\ ((s = 0%F) -> (((2%nat <= (length _in)) /\ (2%nat <= (length v))) /\ (((v!0%nat) = (_in!0%nat)) /\ ((v!1%nat) = (_in!1%nat)))))))) /\ ((length v) = 2%nat))).
Proof. 
  unwrap_C; intuit; subst; simpl in *;
  try lia; try fqsatz; destruct _in;
  simpl; try reflexivity; simpl_default;
  try (simpl in *; lia); try fqsatz;
  destruct (dec (s = 1)%F); auto;try fqsatz;
  destruct (dec (s = 0)%F); auto;try fqsatz.
Qed.

Lemma PositionSwitcher_obligation23_trivial: forall (_in : (list F)) (s : F) (_ : unit) (v : F), Forall (fun x26 => True) _in -> ((length _in) = 2%nat) -> True -> ((s * (1%F - s)%F)%F = 0%F) -> True -> (True -> True).
Proof. hammer. Qed.

(** ** VerifyMerklePath *)

Definition VerifyMerklePathHash (xs : list (F * F)) (init : F) := 
  fold_left (fun (y:F) (x:(F*F)) => if dec (snd x = 0%F) then (Poseidon 2%nat (y :: (fst x) :: nil)) else (Poseidon 2%nat ((fst x):: y :: nil))) 
                       xs init.
                       
Definition zip {A B} (xs : list A) (ys : list B) := combine xs ys.

Definition VerifyMerklePathHashProof i a b := VerifyMerklePathHash (zip a b) i.

Lemma VerifyMerklePath_obligation0_trivial: forall (levels : nat) (leaf : F) (root : F) (pathElements : (list F)) (pathIndices : (list F)) (z : (list (F * F))) (v : Z), True -> True -> Forall (fun x27 => True) pathElements -> ((length pathElements) = levels) -> Forall (fun x28 => True) pathIndices -> ((length pathIndices) = levels) -> Forall (fun x31 => match x31 with (x29,x30) => True end) z -> Forall (fun x31 => match x31 with (x29,x30) => True end) z -> Forall (fun x31 => match x31 with (x29,x30) => True end) z -> ((forall (iz:nat), 0%nat <= iz < (length pathElements) -> (((fst (z!iz)) = (pathElements!iz)) /\ ((snd (z!iz)) = (pathIndices!iz)))) /\ ((length z) = (length pathElements))) -> True -> ((v = 0%nat) -> True).
Proof. hammer. Qed.

Lemma VerifyMerklePath_obligation1_trivial: forall (levels : nat) (leaf : F) (root : F) (pathElements : (list F)) (pathIndices : (list F)) (z : (list (F * F))) (v : Z), True -> True -> Forall (fun x32 => True) pathElements -> ((length pathElements) = levels) -> Forall (fun x33 => True) pathIndices -> ((length pathIndices) = levels) -> Forall (fun x36 => match x36 with (x34,x35) => True end) z -> Forall (fun x36 => match x36 with (x34,x35) => True end) z -> Forall (fun x36 => match x36 with (x34,x35) => True end) z -> ((forall (iz:nat), 0%nat <= iz < (length pathElements) -> (((fst (z!iz)) = (pathElements!iz)) /\ ((snd (z!iz)) = (pathIndices!iz)))) /\ ((length z) = (length pathElements))) -> True -> (((0%nat <= v) /\ (v = levels)) -> True).
Proof. hammer. Qed.

Lemma VerifyMerklePath_obligation2_trivial: forall (levels : nat) (leaf : F) (root : F) (pathElements : (list F)) (pathIndices : (list F)) (z : (list (F * F))) (v : Z), True -> True -> Forall (fun x37 => True) pathElements -> ((length pathElements) = levels) -> Forall (fun x38 => True) pathIndices -> ((length pathIndices) = levels) -> Forall (fun x41 => match x41 with (x39,x40) => True end) z -> Forall (fun x41 => match x41 with (x39,x40) => True end) z -> Forall (fun x41 => match x41 with (x39,x40) => True end) z -> ((forall (iz:nat), 0%nat <= iz < (length pathElements) -> (((fst (z!iz)) = (pathElements!iz)) /\ ((snd (z!iz)) = (pathIndices!iz)))) /\ ((length z) = (length pathElements))) -> True -> (((0%nat <= v) /\ (v < levels)) -> True).
Proof. hammer. Qed.

Lemma VerifyMerklePath_obligation3_trivial: forall (levels : nat) (leaf : F) (root : F) (pathElements : (list F)) (pathIndices : (list F)) (z : (list (F * F))) (i : nat) (v : F), True -> True -> Forall (fun x42 => True) pathElements -> ((length pathElements) = levels) -> Forall (fun x43 => True) pathIndices -> ((length pathIndices) = levels) -> Forall (fun x46 => match x46 with (x44,x45) => True end) z -> Forall (fun x46 => match x46 with (x44,x45) => True end) z -> Forall (fun x46 => match x46 with (x44,x45) => True end) z -> ((forall (iz:nat), 0%nat <= iz < (length pathElements) -> (((fst (z!iz)) = (pathElements!iz)) /\ ((snd (z!iz)) = (pathIndices!iz)))) /\ ((length z) = (length pathElements))) -> (i < levels) -> True -> ((v = (VerifyMerklePathHash (take i z) leaf)) -> True).
Proof. hammer. Qed.

Lemma VerifyMerklePath_obligation4: forall (levels : nat) (leaf : F) (root : F) (pathElements : (list F)) (pathIndices : (list F)) (z : (list (F * F))) (i : nat) (x : F) (v : (list F)), True -> True -> Forall (fun x47 => True) pathElements -> ((length pathElements) = levels) -> Forall (fun x48 => True) pathIndices -> ((length pathIndices) = levels) -> Forall (fun x51 => match x51 with (x49,x50) => True end) z -> Forall (fun x51 => match x51 with (x49,x50) => True end) z -> Forall (fun x51 => match x51 with (x49,x50) => True end) z -> ((forall (iz:nat), 0%nat <= iz < (length pathElements) -> (((fst (z!iz)) = (pathElements!iz)) /\ ((snd (z!iz)) = (pathIndices!iz)))) /\ ((length z) = (length pathElements))) -> (i < levels) -> (x = (VerifyMerklePathHash (take i z) leaf)) -> Forall (fun x52 => True) v -> True -> ((((True /\ ((v!0%nat) = x)) /\ ((v!1%nat) = (fst (z!i)))) /\ ((length v) = 2%nat)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma VerifyMerklePath_obligation5: forall (levels : nat) (leaf : F) (root : F) (pathElements : (list F)) (pathIndices : (list F)) (z : (list (F * F))) (i : nat) (x : F) (y : (list F)) (v : Z), True -> True -> Forall (fun x53 => True) pathElements -> ((length pathElements) = levels) -> Forall (fun x54 => True) pathIndices -> ((length pathIndices) = levels) -> Forall (fun x57 => match x57 with (x55,x56) => True end) z -> Forall (fun x57 => match x57 with (x55,x56) => True end) z -> Forall (fun x57 => match x57 with (x55,x56) => True end) z -> ((forall (iz:nat), 0%nat <= iz < (length pathElements) -> (((fst (z!iz)) = (pathElements!iz)) /\ ((snd (z!iz)) = (pathIndices!iz)))) /\ ((length z) = (length pathElements))) -> (i < levels) -> (x = (VerifyMerklePathHash (take i z) leaf)) -> Forall (fun x58 => True) y -> (((((snd (z!i)) = 0%F) \/ ((snd (z!i)) = 1%F)) /\ ((((snd (z!i)) = 0%F) \/ ((snd (z!i)) = 1%F)) /\ ((((snd (z!i)) = 1%F) -> (((2%nat <= (length (x :: ((fst (z!i)) :: nil)))) /\ (2%nat <= (length y))) /\ (((y!0%nat) = ((x :: ((fst (z!i)) :: nil))!1%nat)) /\ ((y!1%nat) = ((x :: ((fst (z!i)) :: nil))!0%nat))))) /\ (((snd (z!i)) = 0%F) -> (((2%nat <= (length (x :: ((fst (z!i)) :: nil)))) /\ (2%nat <= (length y))) /\ (((y!0%nat) = ((x :: ((fst (z!i)) :: nil))!0%nat)) /\ ((y!1%nat) = ((x :: ((fst (z!i)) :: nil))!1%nat)))))))) /\ ((length y) = 2%nat)) -> True -> ((v = 2%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma VerifyMerklePath_obligation6: forall (levels : nat) (leaf : F) (root : F) (pathElements : (list F)) (pathIndices : (list F)) (z : (list (F * F))) (i : nat) (x : F) (y : (list F)) (v : (list F)), True -> True -> Forall (fun x59 => True) pathElements -> ((length pathElements) = levels) -> Forall (fun x60 => True) pathIndices -> ((length pathIndices) = levels) -> Forall (fun x63 => match x63 with (x61,x62) => True end) z -> Forall (fun x63 => match x63 with (x61,x62) => True end) z -> Forall (fun x63 => match x63 with (x61,x62) => True end) z -> ((forall (iz:nat), 0%nat <= iz < (length pathElements) -> (((fst (z!iz)) = (pathElements!iz)) /\ ((snd (z!iz)) = (pathIndices!iz)))) /\ ((length z) = (length pathElements))) -> (i < levels) -> (x = (VerifyMerklePathHash (take i z) leaf)) -> Forall (fun x64 => True) y -> (((((snd (z!i)) = 0%F) \/ ((snd (z!i)) = 1%F)) /\ ((((snd (z!i)) = 0%F) \/ ((snd (z!i)) = 1%F)) /\ ((((snd (z!i)) = 1%F) -> (((2%nat <= (length (x :: ((fst (z!i)) :: nil)))) /\ (2%nat <= (length y))) /\ (((y!0%nat) = ((x :: ((fst (z!i)) :: nil))!1%nat)) /\ ((y!1%nat) = ((x :: ((fst (z!i)) :: nil))!0%nat))))) /\ (((snd (z!i)) = 0%F) -> (((2%nat <= (length (x :: ((fst (z!i)) :: nil)))) /\ (2%nat <= (length y))) /\ (((y!0%nat) = ((x :: ((fst (z!i)) :: nil))!0%nat)) /\ ((y!1%nat) = ((x :: ((fst (z!i)) :: nil))!1%nat)))))))) /\ ((length y) = 2%nat)) -> Forall (fun x65 => True) v -> True -> (((((((snd (z!i)) = 0%F) \/ ((snd (z!i)) = 1%F)) /\ ((((snd (z!i)) = 0%F) \/ ((snd (z!i)) = 1%F)) /\ ((((snd (z!i)) = 1%F) -> (((2%nat <= (length (x :: ((fst (z!i)) :: nil)))) /\ (2%nat <= (length v))) /\ (((v!0%nat) = ((x :: ((fst (z!i)) :: nil))!1%nat)) /\ ((v!1%nat) = ((x :: ((fst (z!i)) :: nil))!0%nat))))) /\ (((snd (z!i)) = 0%F) -> (((2%nat <= (length (x :: ((fst (z!i)) :: nil)))) /\ (2%nat <= (length v))) /\ (((v!0%nat) = ((x :: ((fst (z!i)) :: nil))!0%nat)) /\ ((v!1%nat) = ((x :: ((fst (z!i)) :: nil))!1%nat)))))))) /\ ((length v) = 2%nat)) /\ (v = y)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma VerifyMerklePath_obligation7: forall (levels : nat) (leaf : F) (root : F) (pathElements : (list F)) (pathIndices : (list F)) (z : (list (F * F))) (i : nat) (x : F) (y : (list F)) (v : F), True -> True -> Forall (fun x66 => True) pathElements -> ((length pathElements) = levels) -> Forall (fun x67 => True) pathIndices -> ((length pathIndices) = levels) -> Forall (fun x70 => match x70 with (x68,x69) => True end) z -> Forall (fun x70 => match x70 with (x68,x69) => True end) z -> Forall (fun x70 => match x70 with (x68,x69) => True end) z -> ((forall (iz:nat), 0%nat <= iz < (length pathElements) -> (((fst (z!iz)) = (pathElements!iz)) /\ ((snd (z!iz)) = (pathIndices!iz)))) /\ ((length z) = (length pathElements))) -> (i < levels) -> (x = (VerifyMerklePathHash (take i z) leaf)) -> Forall (fun x71 => True) y -> (((((snd (z!i)) = 0%F) \/ ((snd (z!i)) = 1%F)) /\ ((((snd (z!i)) = 0%F) \/ ((snd (z!i)) = 1%F)) /\ ((((snd (z!i)) = 1%F) -> (((2%nat <= (length (x :: ((fst (z!i)) :: nil)))) /\ (2%nat <= (length y))) /\ (((y!0%nat) = ((x :: ((fst (z!i)) :: nil))!1%nat)) /\ ((y!1%nat) = ((x :: ((fst (z!i)) :: nil))!0%nat))))) /\ (((snd (z!i)) = 0%F) -> (((2%nat <= (length (x :: ((fst (z!i)) :: nil)))) /\ (2%nat <= (length y))) /\ (((y!0%nat) = ((x :: ((fst (z!i)) :: nil))!0%nat)) /\ ((y!1%nat) = ((x :: ((fst (z!i)) :: nil))!1%nat)))))))) /\ ((length y) = 2%nat)) -> True -> ((v = (Poseidon 2%nat y)) -> (v = (VerifyMerklePathHash (take (i + 1%nat)%nat z) leaf))).
Proof. 
  intros; subst; unfold VerifyMerklePathHash, take in *; simpl in *;unwrap_C.
  replace (i + 1)%nat with (S i) by lia. rewrite fold_left_firstn_S; auto.
  destruct dec.
  - rewrite e in *. intuition;try fqsatz. rewrite Poseidon_2;auto.
    rewrite H17, H20. auto.
  - assert (snd (z ! i) = 1%F). { intuit. }
    rewrite H2 in *. intuition;try fqsatz. rewrite Poseidon_2;auto.
    rewrite H16, H21. auto.
Qed.

Lemma VerifyMerklePath_obligation8: forall (levels : nat) (leaf : F) (root : F) (pathElements : (list F)) (pathIndices : (list F)) (z : (list (F * F))) (v : F), True -> True -> Forall (fun x72 => True) pathElements -> ((length pathElements) = levels) -> Forall (fun x73 => True) pathIndices -> ((length pathIndices) = levels) -> Forall (fun x76 => match x76 with (x74,x75) => True end) z -> Forall (fun x76 => match x76 with (x74,x75) => True end) z -> Forall (fun x76 => match x76 with (x74,x75) => True end) z -> ((forall (iz:nat), 0%nat <= iz < (length pathElements) -> (((fst (z!iz)) = (pathElements!iz)) /\ ((snd (z!iz)) = (pathIndices!iz)))) /\ ((length z) = (length pathElements))) -> True -> ((v = leaf) -> (v = (VerifyMerklePathHash (take 0%nat z) leaf))).
Proof. hammer. Qed.

Lemma VerifyMerklePath_obligation9: forall (levels : nat) (leaf : F) (root : F) (pathElements : (list F)) (pathIndices : (list F)) (z : (list (F * F))) (hasher_out : F) (u : unit), True -> True -> Forall (fun x77 => True) pathElements -> ((length pathElements) = levels) -> Forall (fun x78 => True) pathIndices -> ((length pathIndices) = levels) -> Forall (fun x81 => match x81 with (x79,x80) => True end) z -> Forall (fun x81 => match x81 with (x79,x80) => True end) z -> Forall (fun x81 => match x81 with (x79,x80) => True end) z -> ((forall (iz:nat), 0%nat <= iz < (length pathElements) -> (((fst (z!iz)) = (pathElements!iz)) /\ ((snd (z!iz)) = (pathIndices!iz)))) /\ ((length z) = (length pathElements))) -> (hasher_out = (VerifyMerklePathHash (take levels z) leaf)) -> (root = hasher_out) -> (True -> (root = (VerifyMerklePathHashProof leaf pathElements pathIndices))).
Proof.
  intuition; unwrap_C.
  unfold zip, take in *; simpl in *. rewrite H10, H9.
  assert (z = combine pathElements pathIndices).
  { apply list_combine_eq_forall;auto. }
  rewrite H8. rewrite H2 in H13. rewrite H8 in H13. rewrite <- H13.
  erewrite ListUtil.List.firstn_all;auto.
Qed.

(** ** VerifyHydraCommitment *)

Lemma VerifyHydraCommitment_obligation0: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (v : Z), True -> True -> Forall (fun x82 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x83 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> True -> ((v = 1%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation1: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (v : (list F)), True -> True -> Forall (fun x84 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x85 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> Forall (fun x86 => True) v -> True -> (((True /\ ((v!0%nat) = secret)) /\ ((length v) = 1%nat)) -> ((length v) = 1%nat)).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation2: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (v : Z), True -> True -> Forall (fun x87 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x88 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> True -> ((v = 2%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation3: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (v : (list F)), True -> True -> Forall (fun x89 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x90 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> Forall (fun x91 => True) v -> True -> ((((True /\ ((v!0%nat) = address)) /\ ((v!1%nat) = commitment)) /\ ((length v) = 2%nat)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation4_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : F), True -> True -> Forall (fun x92 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x93 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> ((v = 1%F) -> True).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation5_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : F), True -> True -> Forall (fun x94 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x95 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> (((v = (commitmentMapperPubKey!0%nat)) /\ (v = k0)) -> True).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation6_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : F), True -> True -> Forall (fun x96 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x97 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> (((v = (commitmentMapperPubKey!1%nat)) /\ (v = k1)) -> True).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation7_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : F), True -> True -> Forall (fun x98 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x99 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> (((v = (commitmentReceipt!2%nat)) /\ (v = r2)) -> True).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation8_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : F), True -> True -> Forall (fun x100 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x101 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> (((v = (commitmentReceipt!0%nat)) /\ (v = r0)) -> True).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation9_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : F), True -> True -> Forall (fun x102 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x103 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> (((v = (commitmentReceipt!1%nat)) /\ (v = r1)) -> True).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation10_trivial: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : F), True -> True -> Forall (fun x104 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x105 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> (((v = (Poseidon 2%nat (address :: (commitment :: nil)))) /\ (v = message)) -> True).
Proof. hammer. Qed.

Lemma VerifyHydraCommitment_obligation11: forall (address : F) (secret : F) (commitmentMapperPubKey : (list F)) (commitmentReceipt : (list F)) (commitment : F) (message : F) (k0 : F) (k1 : F) (r2 : F) (r0 : F) (r1 : F) (v : unit), True -> True -> Forall (fun x106 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> Forall (fun x107 => True) commitmentReceipt -> ((length commitmentReceipt) = 3%nat) -> (commitment = (Poseidon 1%nat (secret :: nil))) -> (message = (Poseidon 2%nat (address :: (commitment :: nil)))) -> (k0 = (commitmentMapperPubKey!0%nat)) -> (k1 = (commitmentMapperPubKey!1%nat)) -> (r2 = (commitmentReceipt!2%nat)) -> (r0 = (commitmentReceipt!0%nat)) -> (r1 = (commitmentReceipt!1%nat)) -> True -> ((((@F.one q)%F = 1%F) -> (EdDSAPoseidonVerifier k0 k1 r2 r0 r1 message)) -> (VerifyHydraCommitment address secret commitmentMapperPubKey commitmentReceipt)).
Proof. hammer. Qed.

(** ** hydraS1 *)

Lemma hydraS1_obligation0_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x108 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x109 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x110 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x111 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x112 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x113 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x114 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> ((v = sourceIdentifier) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation1_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x115 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x116 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x117 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x118 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x119 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x120 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x121 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> True -> ((v = sourceSecret) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation2: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x122 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x123 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x124 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x125 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x126 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x127 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x128 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x129 => True) v -> True -> ((((length v) = 2%nat) /\ (v = commitmentMapperPubKey)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation3: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x130 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x131 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x132 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x133 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x134 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x135 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x136 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x137 => True) v -> True -> ((((length v) = 3%nat) /\ (v = sourceCommitmentReceipt)) -> ((length v) = 3%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation4_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x138 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x139 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x140 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x141 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x142 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x143 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x144 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> True -> ((v = destinationIdentifier) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation5_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x145 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x146 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x147 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x148 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x149 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x150 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x151 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> True -> ((v = destinationSecret) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation6: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x152 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x153 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x154 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x155 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x156 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x157 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x158 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> Forall (fun x159 => True) v -> True -> ((((length v) = 2%nat) /\ (v = commitmentMapperPubKey)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation7: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x160 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x161 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x162 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x163 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x164 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x165 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x166 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> Forall (fun x167 => True) v -> True -> ((((length v) = 3%nat) /\ (v = destinationCommitmentReceipt)) -> ((length v) = 3%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation8: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x168 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x169 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x170 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x171 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x172 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x173 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x174 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> True -> ((v = 2%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation9: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x175 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x176 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x177 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x178 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x179 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x180 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x181 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> Forall (fun x182 => True) v -> True -> ((((True /\ ((v!0%nat) = sourceIdentifier)) /\ ((v!1%nat) = sourceValue)) /\ ((length v) = 2%nat)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation10: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (v : nat), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x183 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x184 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x185 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x186 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x187 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x188 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x189 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> ((((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < v)) /\ (v = accountsTreeHeight)) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation11_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x190 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x191 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x192 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x193 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x194 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x195 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x196 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> ((0%nat <= v) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation12_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x197 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x198 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x199 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x200 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x201 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x202 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x203 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> (((v = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) /\ (v = accountLeafConstructor)) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation13_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x204 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x205 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x206 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x207 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x208 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x209 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x210 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> True -> ((v = accountsTreeRoot) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation14: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x211 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x212 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x213 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x214 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x215 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x216 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x217 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> Forall (fun x218 => True) v -> True -> ((((length v) = accountsTreeHeight) /\ (v = accountMerklePathElements)) -> ((length v) = accountsTreeHeight)).
Proof. hammer. Qed.

Lemma hydraS1_obligation15: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x219 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x220 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x221 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x222 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x223 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x224 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x225 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> Forall (fun x226 => True) v -> True -> ((((length v) = accountsTreeHeight) /\ (v = accountMerklePathIndices)) -> ((length v) = accountsTreeHeight)).
Proof. hammer. Qed.

Lemma hydraS1_obligation16: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x227 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x228 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x229 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x230 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x231 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x232 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x233 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> True -> ((v = 2%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation17: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x234 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x235 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x236 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x237 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x238 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x239 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x240 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> Forall (fun x241 => True) v -> True -> ((((True /\ ((v!0%nat) = accountsTreeRoot)) /\ ((v!1%nat) = accountsTreeValue)) /\ ((length v) = 2%nat)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation18: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (v : nat), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x242 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x243 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x244 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x245 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x246 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x247 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x248 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> ((((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < v)) /\ (v = registryTreeHeight)) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation19_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x249 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x250 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x251 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x252 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x253 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x254 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x255 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> ((0%nat <= v) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation20_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x256 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x257 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x258 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x259 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x260 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x261 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x262 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> (((v = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) /\ (v = registryLeafConstructor)) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation21_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x263 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x264 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x265 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x266 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x267 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x268 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x269 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> True -> ((v = registryTreeRoot) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation22: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x270 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x271 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x272 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x273 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x274 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x275 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x276 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> Forall (fun x277 => True) v -> True -> ((((length v) = registryTreeHeight) /\ (v = registryMerklePathElements)) -> ((length v) = registryTreeHeight)).
Proof. hammer. Qed.

Lemma hydraS1_obligation23: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x278 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x279 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x280 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x281 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x282 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x283 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x284 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> Forall (fun x285 => True) v -> True -> ((((length v) = registryTreeHeight) /\ (v = registryMerklePathIndices)) -> ((length v) = registryTreeHeight)).
Proof. hammer. Qed.

Lemma hydraS1_obligation24: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x286 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x287 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x288 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x289 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x290 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x291 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x292 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> True -> ((v = 252%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation25_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x293 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x294 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x295 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x296 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x297 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x298 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x299 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> True -> (((((^ v) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) /\ (v = sourceValue)) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation26: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x300 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x301 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x302 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x303 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x304 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x305 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x306 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x307 => ((x307 = 0%F) \/ (x307 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> True -> ((v = 252%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation27_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x308 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x309 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x310 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x311 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x312 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x313 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x314 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x315 => ((x315 = 0%F) \/ (x315 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> True -> ((((^ v) < (2%nat ^ 252%nat)%Z) /\ (v = claimedValue)) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation28: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x316 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x317 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x318 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x319 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x320 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x321 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x322 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x323 => ((x323 = 0%F) \/ (x323 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x324 => ((x324 = 0%F) \/ (x324 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> True -> ((v = 252%nat) -> ((0%nat <= v) /\ (v <= (C.k - 1%nat)%Z))).
Proof. hammer. Qed.

Lemma hydraS1_obligation29: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x325 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x326 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x327 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x328 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x329 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x330 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x331 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x332 => ((x332 = 0%F) \/ (x332 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x333 => ((x333 = 0%F) \/ (x333 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> True -> ((((^ v) < (2%nat ^ 252%nat)%Z) /\ (v = claimedValue)) -> ((^ v) <= ((2%nat ^ 252%nat)%Z - 1%nat)%Z)).
Proof. hammer. Qed.

Lemma hydraS1_obligation30: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x334 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x335 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x336 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x337 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x338 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x339 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x340 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x341 => ((x341 = 0%F) \/ (x341 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x342 => ((x342 = 0%F) \/ (x342 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> True -> (((((^ v) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) /\ (v = sourceValue)) -> (((^ v) + 1%nat)%Z < (2%nat ^ 252%nat)%Z)).
Proof. hammer. Qed.

Lemma hydraS1_obligation31_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x343 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x344 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x345 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x346 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x347 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x348 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x349 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x350 => ((x350 = 0%F) \/ (x350 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x351 => ((x351 = 0%F) \/ (x351 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> True -> ((v = isStrict) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation32_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x352 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x353 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x354 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x355 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x356 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x357 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x358 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x359 => ((x359 = 0%F) \/ (x359 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x360 => ((x360 = 0%F) \/ (x360 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> True -> ((v = 1%F) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation33_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x361 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x362 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x363 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x364 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x365 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x366 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x367 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x368 => ((x368 = 0%F) \/ (x368 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x369 => ((x369 = 0%F) \/ (x369 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> True -> ((v = (isStrict - 1%F)%F) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation34_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x370 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x371 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x372 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x373 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x374 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x375 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x376 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x377 => ((x377 = 0%F) \/ (x377 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x378 => ((x378 = 0%F) \/ (x378 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> True -> ((v = isStrict) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation35_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x379 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x380 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x381 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x382 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x383 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x384 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x385 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x386 => ((x386 = 0%F) \/ (x386 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x387 => ((x387 = 0%F) \/ (x387 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> True -> (((((^ v) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) /\ (v = sourceValue)) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation36_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x388 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x389 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x390 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x391 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x392 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x393 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x394 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x395 => ((x395 = 0%F) \/ (x395 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x396 => ((x396 = 0%F) \/ (x396 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> True -> ((((^ v) < (2%nat ^ 252%nat)%Z) /\ (v = claimedValue)) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation37_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x397 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x398 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x399 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x400 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x401 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x402 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x403 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x404 => ((x404 = 0%F) \/ (x404 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x405 => ((x405 = 0%F) \/ (x405 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> True -> (((((^ v) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) /\ (v = sourceValue)) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation38_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x406 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x407 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x408 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x409 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x410 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x411 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x412 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x413 => ((x413 = 0%F) \/ (x413 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x414 => ((x414 = 0%F) \/ (x414 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> True -> ((v = (claimedValue - sourceValue)%F) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation39_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x415 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x416 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x417 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x418 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x419 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x420 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x421 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x422 => ((x422 = 0%F) \/ (x422 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x423 => ((x423 = 0%F) \/ (x423 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> True -> ((v = isStrict) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation40_trivial: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (v : F), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x424 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x425 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x426 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x427 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x428 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x429 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x430 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x431 => ((x431 = 0%F) \/ (x431 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x432 => ((x432 = 0%F) \/ (x432 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> True -> ((v = ((claimedValue - sourceValue)%F * isStrict)%F) -> True).
Proof. hammer. Qed.

Lemma hydraS1_obligation41: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (u6 : unit) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x433 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x434 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x435 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x436 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x437 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x438 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x439 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x440 => ((x440 = 0%F) \/ (x440 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x441 => ((x441 = 0%F) \/ (x441 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> (sourceValue = (sourceValue + ((claimedValue - sourceValue)%F * isStrict)%F)%F) -> True -> ((v = 2%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation42: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (u6 : unit) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x442 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x443 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x444 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x445 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x446 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x447 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x448 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x449 => ((x449 = 0%F) \/ (x449 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x450 => ((x450 = 0%F) \/ (x450 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> (sourceValue = (sourceValue + ((claimedValue - sourceValue)%F * isStrict)%F)%F) -> Forall (fun x451 => True) v -> True -> ((((True /\ ((v!0%nat) = sourceSecret)) /\ ((v!1%nat) = 1%F)) /\ ((length v) = 2%nat)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation43: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (u6 : unit) (sourceSecretHash : F) (v : Z), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x452 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x453 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x454 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x455 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x456 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x457 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x458 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x459 => ((x459 = 0%F) \/ (x459 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x460 => ((x460 = 0%F) \/ (x460 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> (sourceValue = (sourceValue + ((claimedValue - sourceValue)%F * isStrict)%F)%F) -> (sourceSecretHash = (Poseidon 2%nat (sourceSecret :: (1%F :: nil)))) -> True -> ((v = 2%nat) -> (0%nat <= v)).
Proof. hammer. Qed.

Lemma hydraS1_obligation44: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (u6 : unit) (sourceSecretHash : F) (v : (list F)), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x461 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x462 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x463 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x464 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x465 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x466 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x467 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x468 => ((x468 = 0%F) \/ (x468 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x469 => ((x469 = 0%F) \/ (x469 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> (sourceValue = (sourceValue + ((claimedValue - sourceValue)%F * isStrict)%F)%F) -> (sourceSecretHash = (Poseidon 2%nat (sourceSecret :: (1%F :: nil)))) -> Forall (fun x470 => True) v -> True -> ((((True /\ ((v!0%nat) = sourceSecretHash)) /\ ((v!1%nat) = externalNullifier)) /\ ((length v) = 2%nat)) -> ((length v) = 2%nat)).
Proof. hammer. Qed.

Lemma hydraS1_obligation45: forall (registryTreeHeight : nat) (accountsTreeHeight : nat) (sourceIdentifier : F) (sourceSecret : F) (sourceCommitmentReceipt : (list F)) (destinationSecret : F) (destinationCommitmentReceipt : (list F)) (accountMerklePathElements : (list F)) (accountMerklePathIndices : (list F)) (accountsTreeRoot : F) (registryMerklePathElements : (list F)) (registryMerklePathIndices : (list F)) (sourceValue : F) (destinationIdentifier : F) (chainId : F) (commitmentMapperPubKey : (list F)) (registryTreeRoot : F) (externalNullifier : F) (nullifier : F) (claimedValue : F) (accountsTreeValue : F) (isStrict : F) (u0 : unit) (u1 : unit) (accountLeafConstructor : F) (u2 : unit) (registryLeafConstructor : F) (u3 : unit) (_x : (list F)) (_y : (list F)) (z : F) (u4 : unit) (u5 : unit) (u6 : unit) (sourceSecretHash : F) (c : F) (u7 : unit), ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < registryTreeHeight)) -> ((252%nat <= (C.k - 1%nat)%Z) /\ (0%nat < accountsTreeHeight)) -> True -> True -> Forall (fun x471 => True) sourceCommitmentReceipt -> ((length sourceCommitmentReceipt) = 3%nat) -> True -> Forall (fun x472 => True) destinationCommitmentReceipt -> ((length destinationCommitmentReceipt) = 3%nat) -> Forall (fun x473 => True) accountMerklePathElements -> ((length accountMerklePathElements) = accountsTreeHeight) -> Forall (fun x474 => True) accountMerklePathIndices -> ((length accountMerklePathIndices) = accountsTreeHeight) -> True -> Forall (fun x475 => True) registryMerklePathElements -> ((length registryMerklePathElements) = registryTreeHeight) -> Forall (fun x476 => True) registryMerklePathIndices -> ((length registryMerklePathIndices) = registryTreeHeight) -> (((^ sourceValue) + 1%nat)%Z < (2%nat ^ 252%nat)%Z) -> True -> True -> Forall (fun x477 => True) commitmentMapperPubKey -> ((length commitmentMapperPubKey) = 2%nat) -> True -> True -> True -> ((^ claimedValue) < (2%nat ^ 252%nat)%Z) -> True -> True -> (VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) -> (VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) -> (accountLeafConstructor = (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil)))) -> (accountsTreeRoot = (VerifyMerklePathHashProof accountLeafConstructor accountMerklePathElements accountMerklePathIndices)) -> (registryLeafConstructor = (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil)))) -> (registryTreeRoot = (VerifyMerklePathHashProof registryLeafConstructor registryMerklePathElements registryMerklePathIndices)) -> Forall (fun x478 => ((x478 = 0%F) \/ (x478 = 1%F))) _x -> (((as_le_f _x) = sourceValue) /\ ((length _x) = 252%nat)) -> Forall (fun x479 => ((x479 = 0%F) \/ (x479 = 1%F))) _y -> (((as_le_f _y) = claimedValue) /\ ((length _y) = 252%nat)) -> (((z = 0%F) \/ (z = 1%F)) /\ (((z = 1%F) -> ((^ claimedValue) <= (^ sourceValue))) /\ ((z = 0%F) -> ~((^ claimedValue) <= (^ sourceValue))))) -> (z = 1%F) -> (((isStrict - 1%F)%F * isStrict)%F = 0%F) -> (sourceValue = (sourceValue + ((claimedValue - sourceValue)%F * isStrict)%F)%F) -> (sourceSecretHash = (Poseidon 2%nat (sourceSecret :: (1%F :: nil)))) -> (c = (Poseidon 2%nat (sourceSecretHash :: (externalNullifier :: nil)))) -> (c = nullifier) -> (True -> (((isStrict = 1%F) -> (claimedValue = sourceValue)) /\ (((^ claimedValue) <= (^ sourceValue)) /\ ((VerifyHydraCommitment sourceIdentifier sourceSecret commitmentMapperPubKey sourceCommitmentReceipt) /\ ((VerifyHydraCommitment destinationIdentifier destinationSecret commitmentMapperPubKey destinationCommitmentReceipt) /\ ((registryTreeRoot = (VerifyMerklePathHashProof (Poseidon 2%nat (accountsTreeRoot :: (accountsTreeValue :: nil))) registryMerklePathElements registryMerklePathIndices)) /\ ((accountsTreeRoot = (VerifyMerklePathHashProof (Poseidon 2%nat (sourceIdentifier :: (sourceValue :: nil))) accountMerklePathElements accountMerklePathIndices)) /\ ((nullifier = (Poseidon 2%nat ((Poseidon 2%nat (sourceSecret :: (1%F :: nil))) :: (externalNullifier :: nil)))) /\ True)))))))).
Proof. 
  intuition; unwrap_C; try fqsatz; subst; auto.
Qed.